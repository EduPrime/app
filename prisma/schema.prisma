generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  role      roleType  @default(PUBLICO)
  tenantId  String?
  email     String?
  apiUserId String
  servers   Servers[]
  Teacher   Teacher[]

  @@schema("public")
}

model AcademicYear {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId    String    @db.Uuid
  templateId  String    @db.Uuid
  refYear     Int
  metadata    Json?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(6)
  updatedBy   String?   @db.Uuid
  tenantId    String?
  deletedAt   DateTime? @db.Timestamptz(6)
  userCreated String?   @db.Uuid

  @@map("academicYear")
  @@schema("public")
}

model AcademicYearTemplate {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refYear     Int
  name        String    @unique @db.VarChar(100)
  stages      Json
  stageCount  Int?
  metadata    Json?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(6)
  deletedAt   DateTime? @db.Timestamptz(6)
  userCreated String?   @db.Uuid
  updatedBy   String?   @db.Uuid
  tenantId    String?

  @@map("academicYearTemplate")
  @@schema("public")
}

model Classroom {
  id                                                                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seriesId                                                          String              @db.Uuid
  maxStudents                                                       Int
  exceededStudents                                                  Int                 @default(0)
  totalStudents                                                     Int                 @default(0)
  pcdStudents                                                       Int                 @default(0)
  startTime                                                         DateTime?           @db.Timestamp(6)
  startTimeInterval                                                 DateTime?           @db.Timestamp(6)
  endTimeInterval                                                   DateTime?           @db.Timestamp(6)
  endTime                                                           DateTime?           @db.Timestamp(6)
  dayofweek                                                         dayofweek?
  name                                                              String              @db.VarChar(100)
  period                                                            period?             @default(MORNING)
  status                                                            status?             @default(ACTIVE)
  abbreviation                                                      String?             @db.VarChar(100)
  year                                                              Int
  metadata                                                          Json?
  userCreated                                                       String?             @db.VarChar(255)
  createdAt                                                         DateTime?           @default(now()) @db.Timestamp(6)
  deletedAt                                                         DateTime?           @db.Timestamp(6)
  updatedAt                                                         DateTime?           @updatedAt @db.Timestamp(6)
  schoolId                                                          String?             @db.Uuid
  updatedBy                                                         String?             @db.Uuid
  tenantId                                                          String?
  Attendance                                                        Attendance[]
  school                                                            School?             @relation(fields: [schoolId], references: [id], onDelete: Restrict, map: "classroom_school_id_fkey")
  series                                                            Series              @relation(fields: [seriesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classroom_seriesid_fkey")
  ConceptualGrade                                                   ConceptualGrade[]
  Content                                                           Content[]
  enrollment                                                        Enrollment[]
  enrollmenthistory_enrollmenthistory_currentClassroomIdToclassroom EnrollmentHistory[] @relation("enrollmenthistory_currentClassroomIdToclassroom")
  enrollmenthistory_enrollmenthistory_formerClassroomIdToclassroom  EnrollmentHistory[] @relation("enrollmenthistory_formerClassroomIdToclassroom")
  NumericGrade                                                      NumericGrade[]
  RegisteredGrade                                                   RegisteredGrade[]
  Schedule                                                          Schedule[]
  TeacherAttendance                                                 TeacherAttendance[]

  @@map("classroom")
  @@schema("public")
}

model Course {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(100)
  status         status?          @default(ACTIVE)
  metadata       Json?
  createdAt      DateTime?        @default(now()) @db.Timestamp(6)
  deletedAt      DateTime?        @db.Timestamp(6)
  updatedAt      DateTime?        @updatedAt @db.Timestamp(6)
  userCreated    String?          @db.VarChar(255)
  updatedBy      String?          @db.Uuid
  tenantId       String?
  courseStage    Int
  graduate       String?
  workload       Decimal?         @db.Decimal
  teachingType   String
  regimeType     String?
  courseModality String
  institutionId  String           @db.Uuid
  schoolId       String?          @db.Uuid
  institution    Institution      @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "course_institutionId_fkey")
  School         School?          @relation(fields: [schoolId], references: [id])
  CourseSchool   CourseSchool[]
  enrollment     Enrollment[]
  EvaluationRule EvaluationRule[]
  preenrollment  PreEnrollment[]
  series         Series[]

  @@map("course")
  @@schema("public")
}

model Discipline {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar(100)
  status               status?                @default(ACTIVE)
  metadata             Json?
  userCreated          String?                @db.Uuid
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  deletedAt            DateTime?              @db.Timestamptz(6)
  updatedAt            DateTime?              @updatedAt @db.Timestamptz(6)
  workload             Decimal?               @db.Decimal
  updatedBy            String?                @db.Uuid
  tenantId             String?
  codDisciplina        Int?
  Attendance           Attendance[]
  Bncc                 Bncc[]
  ConceptualGrade      ConceptualGrade[]
  ContentDiscipline    ContentDiscipline[]
  DisciplineAttendance DisciplineAttendance[]
  DisciplineGrade      DisciplineGrade[]
  NumericGrade         NumericGrade[]
  RegisteredGrade      RegisteredGrade[]
  Schedule             Schedule[]
  StudentFeedback      StudentFeedback[]
  TeacherAttendance    TeacherAttendance[]
  thematicUnit         ThematicUnit[]

  @@map("discipline")
  @@schema("public")
}

model Stage {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numberStage          Int
  startDate            DateTime               @db.Timestamp(6)
  endDate              DateTime               @db.Timestamp(6)
  institutionId        String                 @db.Uuid
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  updatedAt            DateTime?              @updatedAt @db.Timestamp(6)
  updatedBy            String?                @db.Uuid
  tenantId             String?
  userCreated          String?                @db.VarChar(255)
  Attendance           Attendance[]
  ConceptualGrade      ConceptualGrade[]
  DisciplineAttendance DisciplineAttendance[]
  DisciplineGrade      DisciplineGrade[]
  GeneralAttendance    GeneralAttendance[]
  GeneralGrade         GeneralGrade[]
  NumericGrade         NumericGrade[]
  RegisteredGrade      RegisteredGrade[]
  institution          Institution            @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stage_institutionid_fkey")
  TeacherAttendance    TeacherAttendance[]

  @@map("stage")
  @@schema("public")
}

model Enrollment {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId          String              @db.Uuid
  studentId         String              @unique(map: "enrollment_studentid_key") @db.Uuid
  courseId          String              @db.Uuid
  classroomId       String              @db.Uuid
  seriesId          String              @db.Uuid
  name              String              @db.VarChar(100)
  createdAt         DateTime?           @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?           @db.Timestamp(6)
  updatedAt         DateTime?           @updatedAt @db.Timestamp(6)
  updatedBy         String?             @db.Uuid
  tenantId          String?
  dateEnrollment    DateTime            @db.Timestamp(6)
  observations      String?             @db.VarChar(200)
  status            status?             @default(ACTIVE)
  situation         situationType
  enrollmentCode    String              @unique(map: "enrollment_enrollmentcode_key") @db.VarChar(100)
  institutionId     String?             @db.Uuid
  preenrollmentId   String?             @unique(map: "enrollment_preenrollmentid_key") @db.Uuid
  Attendance        Attendance[]
  ConceptualGrade   ConceptualGrade[]
  DisciplineGrade   DisciplineGrade[]
  classroom         Classroom           @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_classroomid_fkey")
  course            Course              @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_courseid_fkey")
  institution       Institution?        @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_institutionid_fkey")
  preenrollment     PreEnrollment?      @relation(fields: [preenrollmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_preenrollmentid_fkey")
  school            School              @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_schoolid_fkey")
  series            Series              @relation(fields: [seriesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_seriesid_fkey")
  student           Student             @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_studentid_fkey")
  enrollmenthistory EnrollmentHistory[]
  NumericGrade      NumericGrade[]
  StudentAttendance StudentAttendance[]
  StudentFeedback   StudentFeedback?

  @@map("enrollment")
  @@schema("public")
}

model EnrollmentHistory {
  id                                                        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startedAt                                                 DateTime   @db.Timestamp(6)
  endedAt                                                   DateTime?  @db.Timestamp(6)
  formerClassroomId                                         String     @db.Uuid
  currentClassroomId                                        String     @db.Uuid
  enrollmentId                                              String     @db.Uuid
  updatedBy                                                 String?    @db.Uuid
  tenantId                                                  String?
  createdAt                                                 DateTime?  @default(now()) @db.Timestamp(6)
  deletedAt                                                 DateTime?  @db.Timestamp(6)
  updatedAt                                                 DateTime?  @updatedAt @db.Timestamp(6)
  classroom_enrollmenthistory_currentClassroomIdToclassroom Classroom  @relation("enrollmenthistory_currentClassroomIdToclassroom", fields: [currentClassroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollmenthistory_currentclassroomid_fkey")
  enrollment                                                Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollmenthistory_enrollmentid_fkey")
  classroom_enrollmenthistory_formerClassroomIdToclassroom  Classroom  @relation("enrollmenthistory_formerClassroomIdToclassroom", fields: [formerClassroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollmenthistory_formerclassroomid_fkey")

  @@map("enrollmenthistory")
  @@schema("public")
}

model StudentAttendance {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enrollmentId String     @db.Uuid
  missType     Int
  schoolId     String     @db.Uuid
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  tenantId     String?
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], map: "faltaaluno_enrollment_id_fkey")
  school       School     @relation(fields: [schoolId], references: [id], map: "faltaaluno_school_id_fkey")

  @@map("studentAttendance")
  @@schema("public")
}

model GeneralAttendance {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId String    @db.Uuid
  numMissed Int
  stageId   String    @db.Uuid
  schoolId  String    @db.Uuid
  updatedAt DateTime? @updatedAt @db.Timestamp(6)
  updatedBy String?   @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  tenantId  String?
  school    School    @relation(fields: [schoolId], references: [id], map: "faltageral_school_id_fkey")
  stage     Stage     @relation(fields: [stageId], references: [id], map: "faltageral_stage_id_fkey")
  student   Student   @relation(fields: [studentId], references: [id], map: "faltageral_student_id_fkey")

  @@map("generalAttendance")
  @@schema("public")
}

model DisciplineAttendance {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId    String     @db.Uuid
  disciplineId String     @db.Uuid
  numMissed    Int
  stageId      String     @db.Uuid
  schoolId     String     @db.Uuid
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  tenantId     String?
  discipline   Discipline @relation(fields: [disciplineId], references: [id], map: "faltacc_discipline_id_fkey")
  school       School     @relation(fields: [schoolId], references: [id], map: "faltacc_school_id_fkey")
  stage        Stage      @relation(fields: [stageId], references: [id], map: "faltacc_stage_id_fkey")
  student      Student    @relation(fields: [studentId], references: [id], map: "faltacc_student_id_fkey")

  @@map("disciplineAttendance")
  @@schema("public")
}

model TeacherAttendance {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date         DateTime       @db.Date
  totalClasses Int
  type         attendanceType
  teacherId    String         @db.Uuid
  classroomId  String         @db.Uuid
  disciplineId String?        @db.Uuid
  stageId      String         @db.Uuid
  schoolId     String         @db.Uuid
  updatedAt    DateTime?      @updatedAt @db.Timestamp(6)
  updatedBy    String?        @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?      @db.Timestamp(6)
  tenantId     String?
  classroom    Classroom      @relation(fields: [classroomId], references: [id], map: "faltaprof_classroom_id_fkey")
  discipline   Discipline?    @relation(fields: [disciplineId], references: [id], map: "faltaprof_discipline_id_fkey")
  school       School         @relation(fields: [schoolId], references: [id], map: "faltaprof_school_id_fkey")
  stage        Stage          @relation(fields: [stageId], references: [id], map: "faltaprof_stage_id_fkey")
  teacher      Teacher        @relation(fields: [teacherId], references: [id], map: "faltaprof_teacher_id_fkey")

  @@map("teacherAttendance")
  @@schema("public")
}

model Attendance {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime       @db.Date
  presence        Boolean        @default(true)
  teacherId       String         @db.Uuid
  studentId       String         @db.Uuid
  classroomId     String         @db.Uuid
  enrollmentId    String         @db.Uuid
  disciplineId    String?        @db.Uuid
  justificationId String?        @db.Uuid
  stageId         String         @db.Uuid
  schoolId        String         @db.Uuid
  updatedAt       DateTime?      @updatedAt @db.Timestamp(6)
  updatedBy       String?        @db.Uuid
  createdAt       DateTime       @default(now()) @db.Timestamp(6)
  deletedAt       DateTime?      @db.Timestamp(6)
  tenantId        String?
  classroom       Classroom      @relation(fields: [classroomId], references: [id], map: "faltacc_classroom_id_fkey")
  discipline      Discipline?    @relation(fields: [disciplineId], references: [id], map: "faltacc_discipline_id_fkey")
  enrollment      Enrollment     @relation(fields: [enrollmentId], references: [id], map: "faltacc_enrollment_id_fkey")
  justification   Justification? @relation(fields: [justificationId], references: [id], map: "faltacc_justification_id_fkey")
  school          School         @relation(fields: [schoolId], references: [id], map: "faltacc_school_id_fkey")
  stage           Stage          @relation(fields: [stageId], references: [id], map: "faltacc_stage_id_fkey")
  student         Student        @relation(fields: [studentId], references: [id], map: "faltacc_student_id_fkey")
  teacher         Teacher        @relation(fields: [teacherId], references: [id], map: "faltacc_teacher_id_fkey")
  numMissed       NumMissed[]

  @@unique([studentId, classroomId, enrollmentId, date, disciplineId], map: "unique_attendance_on_conflict")
  @@map("attendance")
  @@schema("public")
}

model NumMissed {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String     @db.VarChar(100)
  attendanceId String     @db.Uuid
  absent       Boolean
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  tenantId     String?
  Attendance   Attendance @relation(fields: [attendanceId], references: [id], map: "nummissed_attendance_id_fkey")

  @@unique([attendanceId, name])
  @@map("numMissed")
  @@schema("public")
}

model Justification {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar(100)
  createdAt  DateTime     @default(now()) @db.Timestamp(6)
  deletedAt  DateTime?    @db.Timestamp(6)
  updatedAt  DateTime?    @updatedAt @db.Timestamp(6)
  updatedBy  String?      @db.Uuid
  tenantId   String?
  Attendance Attendance[]

  @@map("justification")
  @@schema("public")
}

model GeneralGrade {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId    String    @db.Uuid
  schoolId     String    @db.Uuid
  grade        Decimal   @db.Decimal
  roundedGrade Decimal?  @db.Decimal
  stageId      String    @db.Uuid
  updatedAt    DateTime? @updatedAt @db.Timestamp(6)
  updatedBy    String?   @db.Uuid
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  tenantId     String?
  school       School    @relation(fields: [schoolId], references: [id], map: "notageral_school_id_fkey")
  stage        Stage     @relation(fields: [stageId], references: [id], map: "notageral_stage_id_fkey")
  student      Student   @relation(fields: [studentId], references: [id], map: "notageral_student_id_fkey")

  @@map("generalGrade")
  @@schema("public")
}

model NumericGrade {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  at1          Decimal?   @db.Decimal
  at2          Decimal?   @db.Decimal
  at3          Decimal?   @db.Decimal
  at4          Decimal?   @db.Decimal
  at5          Decimal?   @db.Decimal
  makeUp       Decimal?   @db.Decimal
  grade        Decimal?   @db.Decimal
  studentId    String     @db.Uuid
  enrollmentId String     @db.Uuid
  disciplineId String     @db.Uuid
  stageId      String     @db.Uuid
  schoolId     String     @db.Uuid
  classroomId  String     @db.Uuid
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  tenantId     String?
  classroom    Classroom  @relation(fields: [classroomId], references: [id], map: "notaexame_classroom_id_fkey")
  discipline   Discipline @relation(fields: [disciplineId], references: [id], map: "notaexame_discipline_id_fkey")
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], map: "notaexame_enrollment_id_fkey")
  school       School     @relation(fields: [schoolId], references: [id], map: "notaexame_school_id_fkey")
  stage        Stage      @relation(fields: [stageId], references: [id], map: "notaexame_stage_id_fkey")
  student      Student    @relation(fields: [studentId], references: [id], map: "notaexame_student_id_fkey")

  @@unique([studentId, classroomId, enrollmentId, stageId, disciplineId], map: "unique_numeric_grade_on_conflict")
  @@map("numericGrade")
  @@schema("public")
}

model ConceptualGrade {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId                     String                          @db.Uuid
  enrollmentId                  String                          @db.Uuid
  classroomId                   String                          @db.Uuid
  disciplineId                  String                          @db.Uuid
  schoolId                      String                          @db.Uuid
  stageId                       String                          @db.Uuid
  updatedAt                     DateTime?                       @updatedAt @db.Timestamp(6)
  updatedBy                     String?                         @db.Uuid
  createdAt                     DateTime                        @default(now()) @db.Timestamp(6)
  deletedAt                     DateTime?                       @db.Timestamp(6)
  tenantId                      String?
  classroom                     Classroom                       @relation(fields: [classroomId], references: [id], map: "notaconceitual_classroom_id_fkey")
  discipline                    Discipline                      @relation(fields: [disciplineId], references: [id], map: "notaconceitual_discipline_id_fkey")
  enrollment                    Enrollment                      @relation(fields: [enrollmentId], references: [id], map: "notaconceitual_enrollment_id_fkey")
  school                        School                          @relation(fields: [schoolId], references: [id], map: "notaconceitual_school_id_fkey")
  stage                         Stage                           @relation(fields: [stageId], references: [id], map: "notaconceitual_stage_id_fkey")
  student                       Student                         @relation(fields: [studentId], references: [id], map: "notaconceitual_student_id_fkey")
  conceptualGradeByThematicUnit ConceptualGradeByThematicUnit[]

  @@map("conceptualGrade")
  @@schema("public")
}

model ThematicUnit {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String                          @db.VarChar(100)
  seriesId                      String                          @db.Uuid
  disciplineId                  String                          @db.Uuid
  updatedAt                     DateTime?                       @updatedAt @db.Timestamp(6)
  updatedBy                     String?                         @db.Uuid
  createAt                      DateTime                        @default(now()) @db.Timestamp(6)
  deletedAt                     DateTime?                       @db.Timestamp(6)
  tenantId                      String?
  conceptualGradeByThematicUnit ConceptualGradeByThematicUnit[]
  discipline                    Discipline                      @relation(fields: [disciplineId], references: [id], map: "notaconceitualunidade_discipline_id_fkey")
  series                        Series                          @relation(fields: [seriesId], references: [id], map: "notaconceitualunidade_series_id_fkey")

  @@map("thematicUnit")
  @@schema("public")
}

model ConceptualGradeByThematicUnit {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  grade             String          @db.VarChar(3)
  thematicUnitId    String          @db.Uuid
  conceptualGradeId String          @db.Uuid
  updatedAt         DateTime?       @updatedAt @db.Timestamp(6)
  updatedBy         String?         @db.Uuid
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?       @db.Timestamp(6)
  tenantId          String?
  conceptualGrade   ConceptualGrade @relation(fields: [conceptualGradeId], references: [id], map: "notaconceitualunidade_conceptualgrade_id_fkey")
  thematicUnit      ThematicUnit    @relation(fields: [thematicUnitId], references: [id], map: "notaconceitualunidade_thematicunit_id_fkey")

  @@map("conceptualGradeByThematicUnit")
  @@schema("public")
}

model RegisteredGrade {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  areGradesReleased Boolean    @default(true)
  isCompleted       Boolean    @default(false)
  teacherId         String     @db.Uuid
  classroomId       String     @db.Uuid
  disciplineId      String     @db.Uuid
  stageId           String     @db.Uuid
  updatedAt         DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy         String?    @db.Uuid
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?  @db.Timestamp(6)
  tenantId          String?
  classroom         Classroom  @relation(fields: [classroomId], references: [id], map: "notaregistrada_classroom_id_fkey")
  discipline        Discipline @relation(fields: [disciplineId], references: [id], map: "notaregistrada_discipline_id_fkey")
  stage             Stage      @relation(fields: [stageId], references: [id], map: "notaregistrada_stage_id_fkey")
  teacher           Teacher    @relation(fields: [teacherId], references: [id], map: "notaregistrada_teacher_id_fkey")

  @@unique([teacherId, classroomId, disciplineId, stageId], map: "unique_registered_grade_on_conflict")
  @@map("registeredGrade")
  @@schema("public")
}

model DisciplineGrade {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId    String     @db.Uuid
  enrollmentId String     @db.Uuid
  disciplineId String     @db.Uuid
  schoolId     String     @db.Uuid
  stageId      String     @db.Uuid
  at1          Decimal    @db.Decimal
  at2          Decimal    @db.Decimal
  at3          Decimal    @db.Decimal
  at4          Decimal    @db.Decimal
  eval         Decimal    @db.Decimal
  avg          Decimal    @db.Decimal
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  tenantId     String?
  discipline   Discipline @relation(fields: [disciplineId], references: [id], map: "notadisciplina_discipline_id_fkey")
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], map: "notadisciplina_enrollment_id_fkey")
  school       School     @relation(fields: [schoolId], references: [id], map: "notadisciplina_school_id_fkey")
  stage        Stage      @relation(fields: [stageId], references: [id], map: "notadisciplina_stage_id_fkey")
  student      Student    @relation(fields: [studentId], references: [id], map: "notadisciplina_student_id_fkey")

  @@map("disciplineGrade")
  @@schema("public")
}

model StudentFeedback {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId        String      @db.Uuid
  enrollmentId     String      @unique(map: "unique_student_feedback_on_conflict") @db.Uuid
  schoolId         String      @db.Uuid
  updatedAt        DateTime?   @updatedAt @db.Timestamp(6)
  updatedBy        String?     @db.Uuid
  createdAt        DateTime    @default(now()) @db.Timestamp(6)
  deletedAt        DateTime?   @db.Timestamp(6)
  tenantId         String?
  disciplineId     String?     @db.Uuid
  finalFeedback    String?     @db.VarChar(1000)
  initialFeedback  String      @db.VarChar(1000)
  partialFeedback  String?     @db.VarChar(1000)
  teacherId        String      @db.Uuid
  finalCreatedAt   DateTime?   @default(now()) @db.Timestamp(6)
  finalUpdatedAt   DateTime?   @db.Timestamp(6)
  initialCreatedAt DateTime    @default(now()) @db.Timestamp(6)
  initialUpdatedAt DateTime?   @db.Timestamp(6)
  partialCreatedAt DateTime?   @default(now()) @db.Timestamp(6)
  partialUpdatedAt DateTime?   @db.Timestamp(6)
  discipline       Discipline? @relation(fields: [disciplineId], references: [id], map: "pareceraluno_discipline_id_fkey")
  enrollment       Enrollment  @relation(fields: [enrollmentId], references: [id], map: "pareceraluno_enrollment_id_fkey")
  school           School      @relation(fields: [schoolId], references: [id], map: "pareceraluno_school_id_fkey")
  student          Student     @relation(fields: [studentId], references: [id], map: "pareceraluno_student_id_fkey")
  teacher          Teacher     @relation(fields: [teacherId], references: [id], map: "pareceraluno_teacher_id_fkey")

  @@map("studentFeedback")
  @@schema("public")
}

model Institution {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String               @db.VarChar(100)
  address             String?              @db.VarChar(255)
  city                String?              @db.VarChar(100)
  state               String?              @db.Char(2)
  postalCode          String?              @db.Char(10)
  phone               String?              @db.VarChar(15)
  email               String?              @db.VarChar(255)
  metadata            Json?
  createdAt           DateTime?            @default(now()) @db.Timestamp(6)
  deletedAt           DateTime?            @db.Timestamp(6)
  updatedAt           DateTime?            @updatedAt @db.Timestamp(6)
  updatedBy           String?              @db.Uuid
  tenantId            String?
  userCreated         String?              @db.VarChar(255)
  singleton           Int?                 @default(1)
  course              Course[]
  enrollment          Enrollment[]
  institutionsettings InstitutionSettings?
  preenrollment       PreEnrollment[]
  school              School[]
  school_settings     SchoolSettings[]
  series              Series[]
  servers             Servers[]
  Stage               Stage[]

  @@map("institution")
  @@schema("public")
}

model InstitutionSettings {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime?   @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?   @db.Timestamp(6)
  updatedAt     DateTime?   @updatedAt @db.Timestamp(6)
  updatedBy     String?     @db.Uuid
  tenantId      String?
  institutionId String      @unique(map: "institutionsettings_institutionid_key") @db.Uuid
  dateOpening   DateTime?   @db.Timestamp(6)
  dateClosing   DateTime?   @db.Timestamp(6)
  schoolDays    Float?
  dateStart     DateTime?   @db.Timestamp(6)
  dateEnd       DateTime?   @db.Timestamp(6)
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institutionsettings_institutionid_fkey")

  @@map("institutionSettings")
  @@schema("public")
}

model PreEnrollment {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institutionId     String?        @db.Uuid
  schoolId          String         @db.Uuid
  studentId         String         @unique(map: "preenrollment_studentid_key") @db.Uuid
  courseId          String         @db.Uuid
  seriesId          String         @db.Uuid
  createdAt         DateTime?      @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?      @db.Timestamp(6)
  updatedAt         DateTime?      @updatedAt @db.Timestamp(6)
  updatedBy         String?        @db.Uuid
  tenantId          String?
  datePreenrollment DateTime       @db.Timestamp(6)
  observations      String?        @db.VarChar(200)
  status            status?        @default(ACTIVE)
  preferShift       period?
  situation         situationType?
  preenrollmentcode String?        @unique @db.VarChar(100)
  enrollment        Enrollment?
  course            Course         @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "preenrollment_courseid_fkey")
  institution       Institution?   @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "preenrollment_institutionid_fkey")
  school            School         @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "preenrollment_schoolid_fkey")
  series            Series         @relation(fields: [seriesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "preenrollment_seriesid_fkey")
  student           Student        @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "preenrollment_studentid_fkey")

  @@map("preenrollment")
  @@schema("public")
}

model Schedule {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weekday      dayofweek
  start        DateTime   @db.Time(6)
  end          DateTime   @db.Time(6)
  classroomId  String     @db.Uuid
  schoolId     String     @db.Uuid
  disciplineId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  updatedAt    DateTime?  @updatedAt @db.Timestamp(6)
  updatedBy    String?    @db.Uuid
  tenantId     String?    @db.Uuid
  userCreated  String?    @db.Uuid
  teacherId    String     @db.Uuid
  classroom    Classroom  @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_classroom_id_fkey")
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_discipline_id_fkey")
  school       School     @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_school_id_fkey")
  teacher      Teacher    @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_teacher_id_fkey")

  @@map("schedule")
  @@schema("public")
}

model Content {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date              DateTime            @db.Date
  description       String              @db.VarChar(360)
  classroomId       String?             @db.Uuid
  teacherId         String?             @db.Uuid
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime?           @db.Timestamptz(6)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(6)
  updatedBy         String?             @db.Uuid
  tenantId          String?
  userCreated       String?             @db.Uuid
  classroom         Classroom?          @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "content_classroom_id_fkey")
  teacher           Teacher?            @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "content_teacher_id_fkey")
  ContentBncc       ContentBncc[]
  ContentDiscipline ContentDiscipline[]

  @@map("content")
  @@schema("public")
}

model Bncc {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code             String        @db.VarChar(30)
  objective        String        @db.VarChar(350)
  knowledgeArea    String?       @db.VarChar(100)
  languagePractice String?       @db.VarChar(100)
  fieldsOfAction   String?       @db.VarChar(100)
  knowledgeObjects String?       @db.VarChar(300)
  courseId         String        @db.Uuid
  disciplineId     String        @db.Uuid
  seriesId         String        @db.Uuid
  createdAt        DateTime      @default(now()) @db.Timestamptz(6)
  deletedAt        DateTime?     @db.Timestamptz(6)
  updatedAt        DateTime?     @updatedAt @db.Timestamptz(6)
  updatedBy        String?       @db.Uuid
  tenantId         String?
  userCreated      String?       @db.Uuid
  themathicUnit    String        @db.VarChar(100)
  discipline       Discipline    @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bncc_discipline_id_fkey")
  ContentBncc      ContentBncc[]

  @@map("bncc")
  @@schema("public")
}

model CourseSchool {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId    String    @db.Uuid
  schoolId    String    @db.Uuid
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  updatedAt   DateTime? @db.Timestamp(6)
  updatedBy   String?   @db.Uuid
  tenantId    String?
  userCreated String?   @db.Uuid
  course      Course    @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cursocurso_course_id_fkey")
  school      School    @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cursocurso_school_id_fkey")

  @@map("courseSchool")
  @@schema("public")
}

model ContentDiscipline {
  contentId    String     @db.Uuid
  disciplineId String     @db.Uuid
  content      Content    @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contentdiscipline_content_id_fkey")
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contentdiscipline_discipline_id_fkey")

  @@id([contentId, disciplineId])
  @@map("contentdiscipline")
  @@schema("public")
}

model ContentBncc {
  contentId String  @db.Uuid
  bnccId    String  @db.Uuid
  bncc      Bncc    @relation(fields: [bnccId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contentbncc_bncc_id_fkey")
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contentbncc_content_id_fkey")

  @@id([contentId, bnccId])
  @@map("contentbncc")
  @@schema("public")
}

model School {
  id                           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idpes                        Int?
  INEPCode                     String?                @db.VarChar(100)
  corporateName                String?                @db.VarChar(100)
  acronym                      String?                @db.VarChar(100)
  blockJournalEntries          Boolean?
  operationalStatus            Boolean?
  usesAlternativeRules         Boolean?
  educationNetwork             Boolean?
  administrativeDependency     Organ?
  name                         String                 @db.VarChar(100)
  cnpj                         Decimal?               @db.Decimal(14, 0)
  address                      String?                @db.VarChar(255)
  addressNumber                String?                @db.VarChar(10)
  additionalInfo               String?                @db.VarChar(255)
  neighborhood                 String?                @db.VarChar(100)
  city                         String?                @db.VarChar(100)
  state                        String?                @db.Char(2)
  postalCode                   String?                @db.Char(10)
  unusualLocation              Boolean?
  phone                        String?                @db.VarChar(15)
  phone2                       String?                @db.VarChar(15)
  email                        String?                @db.VarChar(255)
  website                      String?                @db.VarChar(255)
  operatingLocation            Location?
  buildingUsage                Usage?
  sharedSchool                 Boolean?
  sharedSchoolINEPCode         String?                @db.VarChar(100)
  potableWaterAvailable        Boolean?
  sewageAvailable              Boolean?
  electricityAvailable         Boolean?
  wasteDisposal                Disposal?
  wasteTreatmentBySchool       Boolean?
  foodServiceAvailable         Boolean?
  communitySharedSpaces        Boolean?
  usesSurroundingSpaces        Boolean?
  specificFacilities           Boolean?
  generalUseRooms              Room[]
  labsAndFunctionalAreas       Lab[]
  supportFacilities            Facility[]
  insideClassroooms            Int?
  outsideClassrooms            Int?
  refrigeratedClassrooms       Int?
  accessibleClassrooms         Int?
  internetAvailable            Boolean?
  localNetworkAvailable        Boolean?
  connectionTypes              ConnectionType?
  devicesUsedByStudents        Device[]
  availabeDesktops             Int?
  availableLaptops             Int?
  availableTablets             Int?
  teachingEquipments           TeachingEquipment[]
  administrativeStaffNumber    Int?
  teachingStaffNumber          Int?
  generalServicesStaffNumber   Int?
  securityStaffNumber          Int?
  schoolManagementStaffNumber  Int?
  healthcareStaffNumber        Int?
  socialAssistanceStaffNumber  Int?
  specializedAssistance        Boolean?
  elementaryEducationModel     CycleType?
  pedagogicalMaterials         Material[]
  collegiateBodies             CollegiateBody[]
  studentSelectionCriteria     Criteria[]
  wasPedagogicalProjectUpdated Boolean?
  indigenousEducationAvailable Boolean?
  indigenousEducationLanguages Language[]
  linkedWithSuperiorEducation  Boolean?
  headSchoolCode               String?                @db.VarChar(100)
  IESCode                      String?                @db.VarChar(100)
  institutionId                String                 @db.Uuid
  active                       Boolean?               @default(true)
  abbreviation                 String?                @db.VarChar(255)
  longitude                    String?                @db.VarChar(255)
  latitude                     String?                @db.VarChar(255)
  totalArea                    String?                @db.VarChar(255)
  builtArea                    String?                @db.VarChar(255)
  availableArea                String?                @db.VarChar(255)
  blockDiaryEntries            Boolean?
  regulation                   Int?
  logoUrl                      String?                @db.VarChar(255)
  access                       Int?
  managerid                    String?                @db.Uuid
  managerPosition              String?                @db.VarChar(255)
  operationLocation            String?                @db.VarChar(255)
  condition                    Int?
  sharedSchooLinePCode         Int?
  creationDecree               String?                @db.VarChar(255)
  numberOfFloors               Int?
  floorType                    Int?
  energyMeter                  Int?
  hasExternalArea              Boolean?
  metadata                     Json?
  createdAt                    DateTime?              @default(now()) @db.Timestamp(6)
  deletedAt                    DateTime?              @db.Timestamp(6)
  updatedAt                    DateTime?              @updatedAt @db.Timestamp(6)
  updatedBy                    String?                @db.Uuid
  tenantId                     String?
  userCreated                  String?                @db.VarChar(255)
  Attendance                   Attendance[]
  classroom                    Classroom[]
  ConceptualGrade              ConceptualGrade[]
  course                       Course[]
  CourseSchool                 CourseSchool[]
  DisciplineAttendance         DisciplineAttendance[]
  DisciplineGrade              DisciplineGrade[]
  enrollment                   Enrollment[]
  GeneralAttendance            GeneralAttendance[]
  GeneralGrade                 GeneralGrade[]
  NumericGrade                 NumericGrade[]
  preenrollment                PreEnrollment[]
  Schedule                     Schedule[]
  institution                  Institution            @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "school_institutionid_fkey")
  schoolSettings               SchoolSettings[]
  series                       Series[]
  serverAllocations            ServerAllocations[]
  student                      Student[]
  StudentAttendance            StudentAttendance[]
  StudentFeedback              StudentFeedback[]
  teacher                      Teacher[]
  TeacherAttendance            TeacherAttendance[]

  @@map("school")
  @@schema("public")
}

model SchoolSettings {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  dateOpening   DateTime?   @db.Date
  dateClosing   DateTime?   @db.Date
  schoolDays    Decimal?    @db.Decimal
  dateStart     DateTime?   @db.Date
  dateEnd       DateTime?   @db.Date
  institutionId String      @db.Uuid
  schoolId      String      @db.Uuid
  updatedAt     DateTime?   @updatedAt @db.Timestamp(6)
  updatedBy     String?     @db.Uuid
  tenantId      String?
  userCreated   String?     @db.Uuid
  deletedAt     DateTime?   @db.Timestamp(6)
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "school_settings_institution_id_fkey")
  school        School      @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "school_settings_school_id_fkey")

  @@map("schoolSettings")
  @@schema("public")
}

model Series {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(100)
  courseId      String          @db.Uuid
  timetableId   String?         @db.Uuid
  metadata      Json?
  createdAt     DateTime?       @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?       @db.Timestamp(6)
  updatedAt     DateTime?       @updatedAt @db.Timestamp(6)
  updatedBy     String?         @db.Uuid
  tenantId      String?
  userCreated   String?         @db.VarChar(255)
  institutionId String          @db.Uuid
  courseStage   String
  graduate      String
  workload      Decimal?        @db.Decimal
  schoolDays    String
  schoolId      String?         @db.Uuid
  classroom     Classroom[]
  enrollment    Enrollment[]
  preenrollment PreEnrollment[]
  course        Course          @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "series_courseid_fkey")
  institution   Institution     @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "series_institution_fkey")
  School        School?         @relation(fields: [schoolId], references: [id])
  thematicUnit  ThematicUnit[]

  @@map("series")
  @@schema("public")
}

model ServerAllocations {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serverId    String    @db.Uuid
  schoolId    String    @db.Uuid
  anoLetivo   Int
  entryDate   DateTime  @db.Timestamp(6)
  exitDate    DateTime? @db.Timestamp(6)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  updatedAt   DateTime? @updatedAt @db.Timestamp(6)
  updatedBy   String?   @db.Uuid
  tenantId    String?
  userCreated String?   @db.VarChar(255)
  workload    Decimal?  @db.Decimal
  school      School    @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_school")
  servers     Servers   @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_server")

  @@unique([serverId, schoolId, anoLetivo], map: "uq_server_allocation")
  @@map("serverAllocations")
  @@schema("public")
}

model Servers {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String              @db.VarChar(100)
  email              String?             @unique @db.VarChar(255)
  phone              String?             @db.VarChar(15)
  cpf                String              @unique @db.VarChar(11)
  address            String?             @db.VarChar(255)
  position           String              @db.VarChar(255)
  schoolId           String?             @db.Uuid
  createdAt          DateTime?           @default(now()) @db.Timestamp(6)
  deletedAt          DateTime?           @db.Timestamp(6)
  updatedAt          DateTime?           @updatedAt @db.Timestamp(6)
  updatedBy          String?             @db.Uuid
  tenantId           String?
  userCreated        String?             @db.VarChar(255)
  userId             String?             @db.Uuid
  functionId         String?             @db.Uuid
  institutionId      String              @db.Uuid
  codServidor        Int
  contract           contractType?       @default(INDETERMINADO)
  disability         disabilityType?
  server_allocations ServerAllocations[]
  institution        Institution         @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_institution_fkey")
  User               User?               @relation(fields: [userId], references: [id])
  ServerFunction     ServerFunction?     @relation(fields: [functionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_server_function")

  @@map("servers")
  @@schema("public")
}

model Student {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar(100)
  birthdate            DateTime               @db.Timestamp(6)
  gender               String?                @db.Char(1)
  email                String?                @db.VarChar(255)
  phone                String?                @db.VarChar(15)
  address              String?                @db.VarChar(255)
  guardianName         String?                @db.VarChar(100)
  guardianPhone        String?                @db.VarChar(15)
  guardianCpf          String?                @db.VarChar(100)
  guardianEmail        String?                @db.VarChar(100)
  status               status?                @default(ACTIVE)
  photo                Bytes?
  metadata             Json?
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  updatedAt            DateTime?              @updatedAt @db.Timestamp(6)
  updatedBy            String?                @db.Uuid
  tenantId             String?
  userCreated          String?                @db.VarChar(255)
  schoolId             String?                @db.Uuid
  postalCode           String?                @db.VarChar(100)
  residenceZone        residenceZoneType?     @default(URBANA)
  numberAddress        String?                @db.VarChar(100)
  cpf                  String?                @unique @db.VarChar(100)
  neighborhood         String?                @db.VarChar(100)
  city                 String?                @db.VarChar(100)
  complement           String?                @db.VarChar(100)
  fatherName           String?                @db.VarChar(100)
  fatherEmail          String?                @db.VarChar(100)
  fatherCpf            String?                @db.VarChar(100)
  fatherPhone          String?                @db.VarChar(100)
  motherName           String?                @db.VarChar(100)
  motherEmail          String?                @db.VarChar(100)
  motherCpf            String?                @db.VarChar(100)
  motherPhone          String?                @db.VarChar(100)
  rgNumber             String?                @unique @db.VarChar(100)
  rgState              String?                @db.Char(2)
  rgIssueDate          DateTime?              @db.Date
  rgIssuer             String?                @db.VarChar(100)
  birthCertificate     String?                @db.VarChar(100)
  placeOfBirth         String?                @db.VarChar(100)
  docsType             String?                @db.VarChar(100)
  responsibleType      responsibleType?       @default(PAI)
  citystate            String?                @db.VarChar
  disability           disabilityType[]
  Attendance           Attendance[]
  ConceptualGrade      ConceptualGrade[]
  DisciplineAttendance DisciplineAttendance[]
  DisciplineGrade      DisciplineGrade[]
  enrollment           Enrollment?
  GeneralAttendance    GeneralAttendance[]
  GeneralGrade         GeneralGrade[]
  NumericGrade         NumericGrade[]
  preenrollment        PreEnrollment?
  school               School?                @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_school")
  StudentFeedback      StudentFeedback[]

  @@map("student")
  @@schema("public")
}

model Teacher {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId          String              @db.Uuid
  name              String              @db.VarChar(100)
  birthdate         DateTime            @db.Date
  email             String?             @db.VarChar(255)
  phone             String?             @db.VarChar(15)
  address           String?             @db.VarChar(255)
  userId            String?             @db.Uuid
  qualifications    Json?
  status            status?             @default(ACTIVE)
  metadata          Json?
  userCreated       String?             @db.Uuid
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime?           @db.Timestamptz(6)
  updatedAt         DateTime?           @db.Timestamptz(6)
  updatedBy         String?             @db.Uuid
  tenantId          String?             @db.Uuid
  showDetails       Boolean?
  Attendance        Attendance[]
  Content           Content[]
  RegisteredGrade   RegisteredGrade[]
  Schedule          Schedule[]
  StudentFeedback   StudentFeedback[]
  school            School              @relation(fields: [schoolId], references: [id], map: "teacher_school_id_fkey")
  user              User?               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_teacher_fkey")
  TeacherAttendance TeacherAttendance[]

  @@map("teacher")
  @@schema("public")
}

model EvaluationRule {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String    @db.VarChar(255)
  gradeType            String    @db.VarChar(100)
  progressionType      String    @db.VarChar(100)
  parallelMakeupExam   String    @db.VarChar(100)
  averageFormula       String    @db.VarChar(100)
  makeupFormula        String?   @db.VarChar(100)
  maximumGrade         Decimal   @default(10) @db.Decimal(3, 1)
  minimumGrade         Decimal   @default(0) @db.Decimal(3, 1)
  numberActivities     Int       @default(0)
  average              Decimal   @default(0) @db.Decimal(3, 1)
  frequencyType        String?   @db.VarChar(100)
  feedbackType         String?   @db.VarChar(100)
  attendancePercentage Decimal   @db.Decimal(5, 2)
  conceptualLabel      Json?
  frequencyReport      Json?
  createdAt            DateTime  @default(now()) @db.Timestamp(6)
  updatedAt            DateTime? @updatedAt @db.Timestamp(6)
  updatedBy            String?   @db.Uuid
  tenantId             String?   @db.Uuid
  courseId             String    @db.Uuid
  course               Course    @relation(fields: [courseId], references: [id], map: "rule_course_fkey")

  @@map("evaluationRule")
  @@schema("public")
}

model ServerFunction {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(100)
  abbreviation String    @db.VarChar(10)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  updatedAt    DateTime? @updatedAt @db.Timestamp(6)
  updatedBy    String?   @db.Uuid
  tenantId     String?
  userCreated  String?   @db.VarChar(255)

  Servers Servers[] @relation(map: "fk_server_function")

  @@map("serverFunction")
  @@schema("public")
}

enum attendancestatus {
  PRESENT
  ABSENT
  EXCUSED

  @@schema("public")
}

enum dayofweek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@schema("public")
}

enum genderType {
  MASCULINO
  FEMININO

  @@schema("public")
}

enum period {
  MORNING
  AFTERNOON
  EVENING

  @@schema("public")
}

enum position {
  PROFESSOR
  GESTOR
  COORDENADOR
  DIRETOR
  VIGIA

  @@schema("public")
}

enum residenceZoneType {
  URBANA
  RURAL

  @@schema("public")
}

enum responsibleType {
  PAI
  MAE   @map("MÃE")
  AMBOS
  OUTRO

  @@schema("public")
}

enum situationType {
  PENDENTE
  CURSANDO
  APROVADO
  APROVADO_PELO_CONSELHO
  APROVADO_COM_DEPENDENCIA
  REPROVADO
  TRANSFERIDO
  ABANDONO
  FALECIDO

  @@schema("public")
}

enum status {
  ACTIVE
  INACTIVE
  GRADUATED
  SUSPENDED
  TRANSFERRED

  @@schema("public")
}

enum roleType {
  ADMIN
  GESTORMUNICIPAL
  GESTORESCOLAR
  PROFESSOR
  PUBLICO

  @@schema("public")
}

enum contractType {
  INDETERMINADO
  CONTRATADO
  PERMUTA
  ESTAGIARIO
  COMISSIONADO
  EFETIVO

  @@schema("public")
}

enum disabilityType {
  TRANSTORNO_DO_ESPECTRO_AUTISTA                         @map("Transtorno do Espectro Autista")
  TRANSTORNO_DESINTEGRATIVO_DA_INFANCIA_PSICOSE_INFANTIL @map("Transtorno desintegrativo da infância - psicose infantil")
  TDAH                                                   @map("TDAH")
  SINDROME_DE_RETT                                       @map("Síndrome de Rett")
  SINDROME_DE_ASPERGER                                   @map("Síndrome de Asperger")
  SURDOCEGUEIRA                                          @map("Surdocegueira")
  SURDEZ                                                 @map("Surdez")
  DEFICIENCIA_MULTIPLA                                   @map("Deficiência múltipla")
  DEFICIENCIA_MENTAL                                     @map("Deficiência mental")
  DEFICIENCIA_INTELECTUAL                                @map("Deficiência intelectual")
  DEFICIENCIA_FISICA                                     @map("Deficiência física")
  DEFICIENCIA_AUDITIVA                                   @map("Deficiência auditiva")
  CEGUEIRA                                               @map("Cegueira")
  BAIXA_VISAO                                            @map("Baixa visão")
  AUTISMO_CLASSICO                                       @map("Autismo clássico")
  ALTAS_HABILIDADES_SUPERDOTACAO                         @map("Altas habilidades/superdotação")

  @@schema("public")
}

enum attendanceType {
  DISCIPLINA
  DIARIA

  @@schema("public")
}

enum Organ {
  MUNICIPAL @map("Municipal")
  STATE     @map("Estadual")
  FEDERAL   @map("Federal")
  PRIVATE   @map("Privada")

  @@schema("public")
}

enum Location {
  OWNED  @map("Própria")
  RENTED @map("Alugada")

  @@schema("public")
}

enum Usage {
  EXCLUSIVE @map("Exclusiva")
  SHARED    @map("Compartilhada")

  @@schema("public")
}

enum Disposal {
  INCINERATION @map("Incineração")
  LANDFILL     @map("Aterro")
  COMPOSTING   @map("Compostagem")
  RECYCLING    @map("Reciclagem")
  OTHER        @map("Outro")

  @@schema("public")
}

enum Lab {
  COMPUTER_SCIENCE @map("Informática")
  SCIENCE          @map("Ciências")
  MULTIMEDIA       @map("Multimídia")

  @@schema("public")
}

enum Room {
  CLASSROOM     @map("Sala de aula")
  AUDITORIUM    @map("Auditório")
  COMMON_PLACES @map("Espaços comuns")

  @@schema("public")
}

enum Facility {
  RESTROOMS      @map("Banheiros")
  ACCESSIBILITY  @map("Acessibilidade")
  EXTERNAL_AREAS @map("Áreas externas")

  @@schema("public")
}

enum Device {
  COMPUTER   @map("Computador")
  TABLET     @map("Tablet")
  SMARTPHONE @map("Smartphone")

  @@schema("public")
}

enum ConnectionType {
  OPTIC_FIBER @map("Fibra ótica")
  BROAD_BAND  @map("Banda larga")
  SATELLITE   @map("Satélite")
  OTHER       @map("Outro")

  @@schema("public")
}

enum TeachingEquipment {
  PROJECTOR          @map("Projetor")
  DVD_BLU_RAY        @map("DVD/Blu-ray")
  MULTIMEDIA_TV      @map("TV multimídia")
  DIGITAL_WHITEBOARD @map("Lousa digital")
  SOUND_SYSTEM       @map("Sistema de som")

  @@schema("public")
}

enum CycleType {
  CYCLE @map("Ciclo")
  GRADE @map("Série")

  @@schema("public")
}

enum Material {
  MULTIMEDIA_ARCHIVE               @map("Arquivo multimídia")
  TOYS                             @map("Brinquedos")
  EDUCATIONAL_GAMES                @map("Jogos educativos")
  SCIENTIFICAL_MATERIALS           @map("Materiais científicos")
  AUDIO_EQUIPMENT                  @map("Equipamentos de áudio")
  MUSICAL_INSTRUMENTS              @map("Instrumentos musicais")
  ARTISTIC_MATERIALS               @map("Materiais culturais/artísticos")
  PROFESSIONAL_EDUCATION_MATERIALS @map("Materiais de educação profissional")
  SPORT_MATERIALS                  @map("Materiais esportivos")
  INDIGENOUS_MATERIALS             @map("Materiais educacionais indígenas")
  ETHNIC_MATERIALS                 @map("Materiais étnicos")
  RURAL_MATERIALS                  @map("Materiais educacionais do campo")
  NONE_OF_THE_ABOVE                @map("Nenhum dos anteriores")

  @@schema("public")
}

enum CollegiateBody {
  ASSOCIACAO_DE_PAIS           @map("Associação de Pais")
  ASSOCIACAO_DE_PAIS_E_MESTRES @map("Associação de Pais e Mestres")
  GREMIO_ESTUDANTIL            @map("Grêmio Estudantil")
  CONSELHO_ESCOLAR             @map("Conselho Escolar")
  NAO_HA_ORGAOS_COLEGIADOS     @map("Não há órgãos colegiados")

  @@schema("public")
}

enum Criteria {
  ANALISE_CURRICULAR @map("Análise curricular")
  EXAME_DE_SELECAO   @map("Exame de seleção")
  COTAS              @map("Cotas")

  @@schema("public")
}

enum Language {
  PORTUGUES      @map("Português")
  TIKUNA         @map("Ticuna")
  GUARANI_KAIOWA @map("Guarani Kaiowá")
  KAINGANG       @map("Kaingang")
  XAVANTE        @map("Xavante")
  YANOMAMI       @map("Yanomami")
  OUTRO          @map("Outro")

  @@schema("public")
}
